#@+leo-ver=5-thin
#@+node:course-mde-tw.20140417093332.2028: * @file application
#@@language python
#@@tabwidth -4
#@+others
#@+node:course-mde-tw.20140417093332.2029: ** declarations

########################### 1. 導入所需模組
import cherrypy
import os
import cmsimply

########################### 2. 設定近端與遠端目錄
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
else:
    # 表示程式在近端執行
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"

#@+node:course-mde-tw.20140417093332.2030: ** class CDProject
########################### 3. 建立主物件
class CDProject(object):
    _cp_config = {
    # if there is no utf-8 encoding, no Chinese input available
    'tools.encode.encoding': 'utf-8',
    'tools.sessions.on' : True,
    'tools.sessions.storage_type' : 'file',
    #'tools.sessions.locking' : 'explicit',
    'tools.sessions.storage_path' : data_dir+'/tmp',
    # session timeout is 60 minutes
    'tools.sessions.timeout' : 60
    }
    
    #@+others
    #@+node:course-mde-tw.20140417093332.2031: *3* __init__
    def __init__(self):
        # hope to create downloads and images directories　
        if not os.path.isdir(download_root_dir+"downloads"):
            try:
                os.makedirs(download_root_dir+"downloads")
            except:
                print("mkdir error")
        if not os.path.isdir(download_root_dir+"images"):
            try:
                os.makedirs(download_root_dir+"images")
            except:
                print("mkdir error")
        if not os.path.isdir(download_root_dir+"tmp"):
            try:
                os.makedirs(download_root_dir+"tmp")
            except:
                print("mkdir error")
        if not os.path.isdir(data_dir+"brython_programs"):
            try:
                os.makedirs(data_dir+"brython_programs")
            except:
                print("mkdir error")
        if not os.path.isdir(data_dir+"calc_programs"):
            try:
                os.makedirs(data_dir+"calc_programs")
            except:
                print("mkdir error")

    #@+node:course-mde-tw.20140417093332.2032: *3* index
    @cherrypy.expose
    def index(self, input1=None, input2=None):
        raise cherrypy.HTTPRedirect("/cmsimply")
        return "設定與 Github 同步"+str(input1)
    #@+node:course-mde-tw.20140417093332.2033: *3* default
    # default method, if there is no corresponding method, cherrypy will redirect to default method
    # need *args and **kwargs as input variables for all possible URL links
    @cherrypy.expose
    # default can not live with calc method?
    def default_void(self, attr='default', *args, **kwargs):
        raise cherrypy.HTTPRedirect("/")
    #@+node:course-mde-tw.20140417093332.2034: *3* save_program
    @cherrypy.expose
    def save_program(self, filename=None, sheet_content=None):
        with open(data_dir+"/calc_programs/"+filename, "wt", encoding="utf-8") as out_file:
            data = sheet_content.replace("\r\n", "\n")
            out_file.write(data)

        return str(filename)+" saved!<br />"
     





    #@+node:course-mde-tw.20140417093332.2035: *3* inputform
    @cherrypy.expose
    def inputform(self, input1=None, input2=None):
        return "input form"+str(input1)
    #@+node:course-mde-tw.20140417093332.2036: *3* calc
    @cherrypy.expose
    def calc(self, *args, **kwargs):
        ethercalc_path = "http://calc-coursemdetw.rhcloud.com"
        return '''
    <!DOCTYPE html> 
    <html>
    <head>
    <meta http-equiv="content-type" content="text/html;charset=utf-8">
    <script type="text/javascript" src="/static/Brython2.1.0rc2-20140412-152157/brython.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalcconstants.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalc-3.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalctableeditor.js"></script>
    <script type="text/javascript" src="/static/socialcalc/formatnumber2.js"></script>
    <script type="text/javascript" src="/static/socialcalc/formula1.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalcpopup.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalcspreadsheetcontrol.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalcviewer.js"></script>

    <script src="'''+ethercalc_path+'''/socket.io/socket.io.js"></script>
    <script src="'''+ethercalc_path+'''/zappa/zappa.js?123"></script>
    <script src="'''+ethercalc_path+'''/player/broadcast.js"></script>
    <script src="'''+ethercalc_path +'''/static/md5.js"></script>
    <script src="'''+ethercalc_path+'''/player/graph.js"></script>
    <script src="'''+ethercalc_path+'''/player/main.js"></script>
    </head>
    <body onload="brython({debug:1, cache:'version'})">
    <div id="tableeditor" style="margin:8px 0px 10px 0px;">editor goes here</div>
    </div>
    <div id="msg" onclick="this.innerHTML='&nbsp;';"></div>

    <script id="ascript" type="text/python">
    from browser import ajax, doc, alert
    from javascript import JSConstructor

    spreadsheet =  JSConstructor(SocialCalc.SpreadsheetControl)()
    savestr = ""
    spreadsheet.InitializeSpreadsheetControl("tableeditor")
    spreadsheet.ExecuteCommand('redisplay', '')

    def on_complete(req):
        print(req.readyState)
        print('status',req.status)
        if req.status==200 or req.status==0:
            doc["result"].html = req.text
        else:
            doc["result"].html = "error "+req.text

    def err_msg():
        doc["result"].html = "server didn't reply after %s seconds" %timeout

    timeout = 4

    def go(url):
        req = ajax.ajax()
        req.bind('complete',on_complete)
        req.set_timeout(timeout,err_msg)
        req.open('GET',url,True)
        req.send()

    def post(url):
        global spreadsheet
        sheet_content = spreadsheet.CreateSpreadsheetSave()
        req = ajax.ajax()
        req.bind('complete',on_complete)
        req.set_timeout(timeout,err_msg)
        req.open('POST',url,True)
        req.set_header('content-type','application/x-www-form-urlencoded')
        req.send({'sheet_content':sheet_content})

    def show_save(ev):
        global spreadsheet
        sheet_content = spreadsheet.CreateSpreadsheetSave()
        print(sheet_content)
        
    def doreload(ev):
        global spreadsheet
        sheet_content = spreadsheet.CreateSpreadsheetSave()
        parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
        if (parts):
            if (parts.sheet):
                spreadsheet.sheet.ResetSheet()
                spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
            if (parts.edit):
                spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])

        #if (spreadsheet.editor.context.sheetobj.attribs.recalc=="off"):
            #spreadsheet.ExecuteCommand('redisplay', '')
        #else:
        spreadsheet.ExecuteCommand('recalc', '')
        alert("reload done")

    # bindings
    #doc['timeout'].bind('click',lambda ev:go('/ajax.py'))
    doc['save_program'].bind('click',lambda ev:post('/save_program'))
    doc['show_save'].bind('click', show_save)
    doc['doreload'].bind('click', doreload)
    </script>
    <button id="show_save">顯示內容</button>
    <button id="doreload">do reload</button>
    <button onClick=exec_command();>exec command</button>
    <button id="save_program";>save program</button>
    </body>
    </html>
    '''

    #@+node:course-mde-tw.20140417093332.2037: *3* ethercalc
    @cherrypy.expose
    def ethercalc(self, filename=None, *args, **kwargs):
        part1 = '''
    <!DOCTYPE html> 
    <!--<html manifest="/static/manifest.appcache">-->
    <html>
    <head>
    <meta http-equiv="content-type" content="text/html;charset=utf-8">
    <script type="text/javascript" src="/static/Brython2.1.0rc2-20140412-152157/brython.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalcconstants.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalc-3.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalctableeditor.js"></script>
    <script type="text/javascript" src="/static/socialcalc/formatnumber2.js"></script>
    <script type="text/javascript" src="/static/socialcalc/formula1.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalcpopup.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalcspreadsheetcontrol.js"></script>
    <script type="text/javascript" src="/static/socialcalc/socialcalcviewer.js"></script>
    </head>
    <body onload="brython({debug:1, cache:'version'})">
    <div id="tableeditor" style="margin:8px 0px 10px 0px;">editor goes here</div>
    </div>
    <div id="msg" onclick="this.innerHTML='&nbsp;';"></div>

    <script id="ascript" type="text/python">
    from browser import ajax, doc, alert, websocket
    from javascript import JSConstructor

    spreadsheet =  JSConstructor(SocialCalc.SpreadsheetControl)()
    savestr = ""
    spreadsheet.InitializeSpreadsheetControl("tableeditor")
    spreadsheet.ExecuteCommand('redisplay', '')

    def on_complete(req):
        print(req.readyState)
        print('status',req.status)
        if req.status==200 or req.status==0:
            doc["result"].html = req.text
        else:
            doc["result"].html = "error "+req.text

    def err_msg():
        doc["result"].html = "server didn't reply after %s seconds" %timeout

    timeout = 4

    def go(url):
        req = ajax.ajax()
        req.bind('complete',on_complete)
        req.set_timeout(timeout,err_msg)
        req.open('GET',url,True)
        req.send()

    def post(url):
        global spreadsheet
        sheet_content = spreadsheet.CreateSpreadsheetSave()
        req = ajax.ajax()
        req.bind('complete',on_complete)
        req.set_timeout(timeout,err_msg)
        req.open('POST',url,True)
        req.set_header('content-type','application/x-www-form-urlencoded')
        req.send({'filename':doc["filename"].value, 'sheet_content':sheet_content})

    def show_save(ev):
        global spreadsheet
        sheet_content = spreadsheet.CreateSpreadsheetSave()
        print(sheet_content)
        
    def doreload(ev):
        global spreadsheet
        sheet_content = spreadsheet.CreateSpreadsheetSave()
        parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
        if (parts):
            if (parts.sheet):
                spreadsheet.sheet.ResetSheet()
                spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
            if (parts.edit):
                spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])

        #if (spreadsheet.editor.context.sheetobj.attribs.recalc=="off"):
            #spreadsheet.ExecuteCommand('redisplay', '')
        #else:
        spreadsheet.ExecuteCommand('recalc', '')
        alert("reload done")

    # get program from server
    def get_prog(ev):
        # ajax can only read data from server
        _name = '/calc_programs/'+doc["filename"].value
        try:
            sheet_content = open(_name, encoding="utf-8").read()
            parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
            if (parts):
                if (parts.sheet):
                    spreadsheet.sheet.ResetSheet()
                    spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
                if (parts.edit):
                    spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
            spreadsheet.ExecuteCommand('recalc', '')
            doc["result"].html = doc["filename"].value+" loaded!"
        except:
            doc["result"].html = "can not get "+doc["filename"].value+"!"

    # for built-in websocket
    def on_open(evt):
        doc['send_button'].disabled = False
        doc['closebtn'].disabled = False
        doc['openbtn'].disabled = True

    def on_message(evt):
        # message reeived from server
        alert("Message received : %s" %evt.data)

    def on_close(evt):
        # websocket is closed
        alert("Connection is closed")
        doc['openbtn'].disabled = False
        doc['closebtn'].disabled = True
        doc['send_button'].disabled = True

    ws = None
    def _open(evt):
        global spreadsheet
        sheet_content = spreadsheet.CreateSpreadsheetSave()
        if not __BRYTHON__.has_websocket:
            alert("WebSocket is not supported by your browser")
            return
        global ws
        # open a web socket
        ws = websocket.websocket("wss://localhost:8000")
        # bind functions to web socket events
        ws.bind('open',on_open)
        ws.bind(sheet_content,on_message)
        ws.bind('close',on_close)

    def send(evt):
        data = doc["data"].value
        if data:
            ws.send(data)

    def close_connection(evt):
        ws.close()
        doc['openbtn'].disabled = False

    # bindings
    #doc['timeout'].bind('click',lambda ev:go('/ajax.py'))
    doc['save_program'].bind('click',lambda ev:post('/save_program'))
    doc['get_prog'].bind('click', get_prog)
    doc['show_save'].bind('click', show_save)
    doc['doreload'].bind('click', doreload)
    doc['openbtn'].bind('click', _open)
    '''
        # if load program through url
        if filename != None:
            load_program = '''
    # ajax can only read data from server
    _name = '/calc_programs/'''+filename+''''
    try:
        sheet_content = open(_name, encoding="utf-8").read()
        parts = spreadsheet.DecodeSpreadsheetSave(sheet_content)
        if (parts):
            if (parts.sheet):
                spreadsheet.sheet.ResetSheet()
                spreadsheet.ParseSheetSave(sheet_content[parts.sheet.start:parts.sheet.end])
            if (parts.edit):
                spreadsheet.editor.LoadEditorSettings(sheet_content[parts.edit.start:parts.edit.end])
        spreadsheet.ExecuteCommand('recalc', '')
        doc["filename"].value = "'''+filename+'''"
        doc["result"].html = "'''+filename+''' loaded!"
    except:
        doc["result"].html = "can not get '''+filename+'''!"
    '''
        else:
            load_program = ""

        part2 = '''
    </script>
    <button id="show_save">顯示內容</button>
    <button id="doreload">do reload</button>
    <button onClick=exec_command();>exec command</button>
    <button id="save_program";>save program</button>
    filename: <input id="filename">
    <button id="get_prog">get prog file</button><br />
    <div id="result">(empty)</div><br />
    <button id="openbtn">Open connection</button> 
    <input id="data">
    <button id="send_button" disabled onclick="send()">Send</button>
    <button id="closebtn" disabled onclick="close_connection()">Close connection</button>
    </body>
    </html>
    '''
        return part1+load_program+part2

    #@+node:course-mde-tw.20140417093332.2038: *3* print99
    @cherrypy.expose
    # version 1 use no table
    def print99(self, var1=10, var2=10):
        # initialize outstring
        outstring = ""
        # initialize count
        count = 0
        for i in range(1, int(var1)):
            for j in range(1, int(var2)):
                count += 1
                if count%9 == 0:
                    outstring += str(i) + "x" + str(j) + "=" + str(i*j) + "<br />"
                else:
                    outstring += str(i) + "x" + str(j) + "=" + str(i*j) + "&nbsp;"*4
        return outstring
        #return "列印九九乘法表"+str(var1)+str(var2)
    #@+node:course-mde-tw.20140417093332.2039: *3* print992
    @cherrypy.expose
    # version 2 use table
    def print992(self, var1=10, var2=10):
        # initialize outstring
        outstring = "<table  style='border: 5px double rgb(109, 2, 107); height: 100px; background-color: rgb(255, 255, 255); width: 300px;' align='left' cellpadding='8' cellspacing='8' frame='border' rules='all'>"
        # initialize count
        count = 0
        for i in range(1, int(var1)):
            outstring += "<tr>"
            for j in range(1, int(var2)):
                outstring += "<td>"+str(i) + "x" + str(j) + "=" + str(i*j) + "</td>"
            outstring += "</tr>"
        outstring += "</table>"
        return outstring
        #return "列印九九乘法表"+str(var1)+str(var2)
    #@+node:course-mde-tw.20140417093332.2040: *3* print993
    @cherrypy.expose
    # version 3 add javascript alert
    def print993(self, var1=10, var2=10):
        # initialize outstring
        outstring = "<table  style='border: 5px double rgb(109, 2, 107); height: 600px; background-color: rgb(255, 255, 255); width: 800px;' align='left' cellpadding='8' cellspacing='8' frame='border' rules='all'>"
        # initialize count
        count = 0
        for i in range(1, int(var1)):
            outstring += "<tr>"
            for j in range(1, int(var2)):
                outstring += "<td><button onClick=alert('"+str(i*j)+"')>"+str(i) + "x" + str(j) + "</button>=" + str(i*j) + "</td>"
            outstring += "</tr>"
        outstring += "</table>"
        return outstring
        #return "列印九九乘法表"+str(var1)+str(var2)
    #@-others
    #index.exposed = True

#@-others
########################### 4. 安排啟動設定
# 配合程式檔案所在目錄設定靜態目錄或靜態檔案
application_conf = {
        '/static':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static"},
        '/images':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/images"},
        '/downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/downloads"},
        '/brython_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/brython_programs"},
        '/calc_programs':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/calc_programs"},
        '/':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static/openjscad"}
    }

########################### 5. 在近端或遠端啟動程式
# 利用 HelloWorld() class 產生案例物件
root = CDProject()
# 導入 CMSimply 內容管理模組
root.cmsimply = cmsimply.CMSimply()
# 導入 Download
root.cmsimply.download = cmsimply.Download()
#####################################################
# 導入協同程式 cdag1
#####################################################
# 以下為 cdag1 的模組導入與連結設定
import programs.cdag1 as cdag1
root.cdag1 = cdag1.CDAG1()
#####################################################
# 導入協同程式 cdag2
#####################################################
# 以下為 cdag2 的模組導入與連結設定
import programs.cdag2 as cdag2
root.cdag2 = cdag2.CDAG2()

<<<<<<< HEAD

import programs.cdag17 as cdag17
root.cdag17 = cdag17.CDAG17()
=======
import programs.cdag10 as cdag10
root.cdag10 = cdag10.CDAG10()
>>>>>>> 06b4a5250653389e386ed3526d054110b92d6f80

# 以下為 cdag30 的模組導入與連結設定
import programs.cdag30 as cdag30
root.cdag30 = cdag30.CDAG30()

# 假如在 os 環境變數中存在 'OPENSHIFT_REPO_DIR', 表示程式在 OpenShift 環境中執行
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 雲端執行啟動
    application = cherrypy.Application(root, config = application_conf)
else:
    # 近端執行啟動
    '''
    cherrypy.server.socket_port = 8083
    cherrypy.server.socket_host = '127.0.0.1'
    '''
    cherrypy.quickstart(root, config = application_conf)
#@-leo
